/* Copyright (C) 2016-2018 INRA
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef ORG_VLEPROJECT_BARYONYX_SOLVER_CORE
#define ORG_VLEPROJECT_BARYONYX_SOLVER_CORE

#include <functional>
#include <limits>
#include <memory>
#include <stdexcept>
#include <string>
#include <tuple>
#include <vector>

#if defined _WIN32 || defined __CYGWIN__
#define BARYONYX_HELPER_DLL_IMPORT __declspec(dllimport)
#define BARYONYX_HELPER_DLL_EXPORT __declspec(dllexport)
#define BARYONYX_HELPER_DLL_LOCAL
#else
#if __GNUC__ >= 4
#define BARYONYX_HELPER_DLL_IMPORT __attribute__((visibility("default")))
#define BARYONYX_HELPER_DLL_EXPORT __attribute__((visibility("default")))
#define BARYONYX_HELPER_DLL_LOCAL __attribute__((visibility("hidden")))
#else
#define BARYONYX_HELPER_DLL_IMPORT
#define BARYONYX_HELPER_DLL_EXPORT
#define BARYONYX_HELPER_DLL_LOCAL
#endif
#endif

#ifdef BARYONYX_DLL
#ifdef libbaryonyx_EXPORTS
#define BARYONYX_API BARYONYX_HELPER_DLL_EXPORT
#else
#define BARYONYX_API BARYONYX_HELPER_DLL_IMPORT
#endif
#define BARYONYX_LOCAL BARYONYX_HELPER_DLL_LOCAL
#define BARYONYX_MODULE BARYONYX_HELPER_DLL_EXPORT
#else
#define BARYONYX_API
#define BARYONYX_LOCAL
#define BARYONYX_MODULE BARYONYX_HELPER_DLL_EXPORT
#endif

namespace baryonyx {

/** @c index is used as accessors for all array. */
using index = int;

struct precondition_failure : std::logic_error
{
    precondition_failure(const char* msg)
      : std::logic_error(msg)
    {}
};

struct postcondition_failure : std::logic_error
{
    postcondition_failure(const char* msg)
      : std::logic_error(msg)
    {}
};

struct numeric_cast_failure : std::logic_error
{
    numeric_cast_failure()
      : std::logic_error("numeric_cast_failure: loss of range")
    {}
};

struct file_access_error
{
    std::string file;
    int error;
};

struct file_access_failure : std::runtime_error
{
    file_access_failure(std::string file, int error)
      : std::runtime_error("file_access_failure")
      , m_error{ std::move(file), error }
    {}

    std::string file() const
    {
        return m_error.file;
    }

    int error() const
    {
        return m_error.error;
    }

private:
    file_access_error m_error;
};

enum class file_format_error_tag
{
    end_of_file = 1,
    unknown,
    already_defined,
    incomplete,
    bad_name,
    bad_operator,
    bad_integer,
    bad_objective_function_type,
    bad_bound,
    bad_function_element,
    bad_constraint,
    too_many_variables,
    too_many_constraints
};

struct file_format_error
{
    std::string element;
    int line;
    int column;
    file_format_error_tag tag;
};

struct file_format_failure : std::runtime_error
{
    file_format_failure(std::string element,
                        file_format_error_tag failure,
                        int line,
                        int column)
      : std::runtime_error("file_format_failure")
      , m_error{ std::move(element), line, column, failure }
    {}

    file_format_failure(file_format_error_tag failure, int line, int column)
      : std::runtime_error("file_format_failure")
      , m_error{ std::string(), line, column, failure }
    {}

    file_format_failure(file_format_error_tag failure)
      : std::runtime_error("file_format_failure")
      , m_error{ std::string(), -1, -1, failure }
    {}

    std::string element() const
    {
        return m_error.element;
    }

    int line() const
    {
        return m_error.line;
    }

    int column() const
    {
        return m_error.column;
    }

    file_format_error_tag failure() const
    {
        return m_error.tag;
    }

private:
    file_format_error m_error;
};

enum class problem_definition_error_tag
{
    empty_variables = 1,
    empty_objective_function,
    variable_not_used,
    bad_bound,
    multiple_constraint,
};

struct problem_definition_error
{
    std::string element;
    problem_definition_error_tag tag;
};

struct problem_definition_failure : std::runtime_error
{
    problem_definition_failure(std::string element,
                               problem_definition_error_tag failure)
      : std::runtime_error("problem_definition_failure")
      , m_error{ std::move(element), failure }
    {}

    std::string element() const
    {
        return m_error.element;
    }

    problem_definition_error_tag failure() const
    {
        return m_error.tag;
    }

private:
    problem_definition_error m_error;
};

enum class solver_error_tag
{
    no_solver_available = 1,
    unrealisable_constraint,
    not_enough_memory
};

struct solver_error
{
    solver_error_tag tag;
};

struct solver_failure : std::runtime_error
{
    solver_failure(solver_error_tag failure)
      : std::runtime_error("solver_failure")
      , m_error{ failure }
    {}

    solver_error_tag failure() const
    {
        return m_error.tag;
    }

private:
    solver_error m_error;
};

/**
 * @brief Stores the solver parameters options.
 *
 * @details @c baryonyx::solver_parameters manage behaviour of baryonyx
 *     solvers. If bad value are provided, for instance negative value for the
 *     @c delta or @c kappa-step variables, the default is used.
 *
 */
struct BARYONYX_API solver_parameters
{
    enum class pre_constraint_order
    {
        none = 0, ///< Use the raw_problem (or lp file) order for constraints
                  ///< and variables.
        memory,   ///< Default, use the raw_problem (or lp file) order for
                  ///< constraints but sort the variables to improve the memory
                  ///< cache efficiency.
        less_greater_equal, ///< sort constraints according to their type
                            ///< (first less and finally greater then equal)
                            ///< and sort variable to improve the memory cache
                            ///< efficiency.
        less_equal_greater, ///< sort constraints according to their type
                            ///< (first less and finally equal then greater)
                            ///< and sort variable to improve the memory cache
                            ///< efficiency.
        greater_less_equal, ///< sort constraints according to their type
                            ///< (first greater then less and finally equal)
                            ///< and sort variable to improve the memory cache
                            ///< efficiency.
        greater_equal_less, ///< sort constraints according to their type
                            ///< (first greater then equal and finally less)
                            ///< and sort variable to improve the memory cache
                            ///< efficiency.
        equal_less_greater, ///< sort constraints according to their type
                            ///< (first equal then less and finally greater)
                            ///< and sort variable to improve the memory cache
                            ///< efficiency.
        equal_greater_less, ///< sort constraints according to their type
                            ///< (first equal then greater and finally less)
                            ///< and sort variable to improve the memory cache
                            ///< efficiency.
        p1,                 ///< reserved
        p2,                 ///< reserved
        p3,                 ///< reserved
        p4,                 ///< reserved

    };

    enum class init_policy_type
    {
        bastert = 0,
        random,
        best
    };

    enum class floating_point_type
    {
        float_type = 0,
        double_type,
        longdouble_type
    };

    enum class constraint_order
    {
        none = 0,
        reversing,
        random_sorting,
        infeasibility_decr,
        infeasibility_incr,
        lagrangian
    };

    enum class cost_norm_type
    {
        none = 0,
        random,
        l1,
        l2,
        loo
    };

    enum class mode_type : unsigned
    {
        none = 0,
        manual = 1,
        nlopt = 2,
        branch = 4
    };

    /**
     * Preprocessor options available for @c solve or @c optimize function.
     */
    enum class preprocessor_options
    {
        none = 0,
        all
    };

    enum class observer_type
    {
        none,
        pnm,
        file
    };

    /**
     * @brief Solution storage policy for the optimizer mode.
     */
    enum class storage_type
    {
        one,   ///< stores only the best solution found.
        bound, ///< stores the best and the bad solution found.
        five   ///< stores the best five solution found.
    };

    double time_limit{ -1 }; ///< value <= 0 means infinity time.
    double theta{ 0.5 };
    double delta{ -1 }; ///< value == -1 means automatic.
    double kappa_min{ 0 };
    double kappa_step{ 1.e-3 };
    double kappa_max{ 0.6 };
    double alpha{ 1 };
    double pushing_k_factor{ 0.9 };
    double pushing_objective_amplifier{ 5 };
    double init_random{ 0.5 };
    unsigned int seed{ 0 }; ///< value == 0 means automatic seed.
    int thread{ 0 };        ///< value <= 0 means automatic detection.
    int limit{ 1000 };      ///< value <= 0 means infinity loop.
    int print_level{ 0 };
    int w{ 20 };
    int pushes_limit{ 100 };
    int pushing_iteration_limit{ 50 };
    pre_constraint_order pre_order{ pre_constraint_order::none };
    constraint_order order{ constraint_order::none };
    floating_point_type float_type{ floating_point_type::double_type };
    init_policy_type init_policy{ init_policy_type::bastert };
    cost_norm_type cost_norm{ cost_norm_type::loo };
    mode_type mode{ mode_type::none };
    preprocessor_options preprocessor{ preprocessor_options::all };
    observer_type observer{ observer_type::none };
    storage_type storage{ storage_type::one };
};

/**
 * @brief Stores logging system and parameters.
 *
 * @details @c baryonyx::context manages the logging system and stores a set of
 *     parameters for solvers. Default, the logging system is active and use
 *     @c stdout C file structure as output stream. To disable logging system,
 *         use the CMake WITH_LOG=OFF or undefined the @c BARYONYX_ENABLE_LOG
 *         preprocessor value to hide all messages. To disable debug message
 *         only, use the CMake WITH_DEBUG=OFF or undefined the @c
 *         BARYONYX_ENABLE_DEBUG preprocessor value.
 *
 *     The implementation of this class is hidden into private include to
 *     ensure a stable ABI of the Baryonyx library.
 */
struct context;

/**
 * @brief Stores the @c context into smart pointer.
 *
 * @details This type is use in many place of the Baryonyx library and
 *     application to simplify source code. We use a no copyable smart pointer
 *     to ensure thread safe library. Each thread must use its own @c context.
 *     Use the @c copy_context function to simplify the copy. We provide a free
 *     function to delete context pointer to avoid context publication.
 */
using context_ptr = std::unique_ptr<context, void (*)(context*)>;

BARYONYX_API context_ptr
make_context(FILE* f = stdout, int verbose_level = 6);

BARYONYX_API context_ptr
make_context(std::function<void(int, std::string)> logger,
             int verbose_level = 6);

BARYONYX_API context_ptr
copy_context(const context_ptr& ctx, FILE* f = stdout);

BARYONYX_API context_ptr
copy_context(const context_ptr& ctx,
             std::function<void(int, std::string)> logger);

BARYONYX_API context_ptr
copy_context(const context_ptr& ctx, FILE* f, int verbose_level);

BARYONYX_API context_ptr
copy_context(const context_ptr& ctx,
             std::function<void(int, std::string)> logger,
             int verbose_level);

/**
 * @brief Assign baryonyx internal parameters.
 *
 * @details This function is used to provide internal parameters to Baryonyx
 *     library and to ensures a stable API and ABI (for example extends the
 *     solver without change in @c solver_parameters). Normally, this function
 *     is not used.
 *
 * @param ctx Baryonyx's internal state.
 * @param name The name of the parameters.
 * @param value A string representation of the parameters.
 */
BARYONYX_API void
context_set_parameters(const context_ptr& ctx,
                       std::string name,
                       std::string value);

/**
 * @brief Affects parameters to the solver.
 *
 * @details For each variables of @c params, value is check and assign to the
 *     solver's internal variables.
 *
 * @param ctx Baryonyx's internal state.
 * @param params Parameters to be copied.
 */
BARYONYX_API void
context_set_solver_parameters(const context_ptr& ctx,
                              const solver_parameters& params);

/**
 * @brief Get solver's internal state.
 *
 * @param ctx Baryonyx's internal state.
 *
 * @return A copy of the internal state.
 */
BARYONYX_API
solver_parameters
context_get_solver_parameters(const context_ptr& ctx);

enum class variable_type
{
    real,
    binary,
    general
};

enum class problem_solver_type
{
    equalities_01,
    equalities_101,
    equalities_Z,
    inequalities_01,
    inequalities_101,
    inequalities_Z
};

enum class objective_function_type
{
    maximize,
    minimize
};

enum class operator_type
{
    equal,
    greater,
    less,
};

struct variable_value
{
    variable_value() = default;

    variable_value(int min_, int max_, variable_type type_)
      : min(min_)
      , max(max_)
      , type(type_)
    {}

    int min{ 0 };
    int max{ std::numeric_limits<int>::max() };
    variable_type type{ variable_type::real };
};

struct variables
{
    std::vector<std::string> names;
    std::vector<variable_value> values;
};

struct function_element
{
    function_element() = default;

    function_element(int factor_, index variable_index_) noexcept
      : factor(factor_)
      , variable_index(variable_index_)
    {}

    int factor = { 0 };
    index variable_index{ -1 };
};

struct objective_function_element
{
    objective_function_element(double factor_, index variable_index_) noexcept
      : factor(factor_)
      , variable_index(variable_index_)
    {}

    double factor = { 0 };
    index variable_index{ -1 };
};

struct constraint
{
    std::string label;
    std::vector<function_element> elements;
    int value = { 0 };
    int id;
};

struct objective_function
{
    std::vector<objective_function_element> elements;
    double value = { 0 };
};

struct affected_variables
{
    void push_back(std::string name, bool value)
    {
        names.emplace_back(name);
        values.emplace_back(value);
    }

    std::vector<std::string> names;
    std::vector<bool> values;
};

struct raw_problem
{
    objective_function objective;

    std::vector<constraint> equal_constraints;
    std::vector<constraint> greater_constraints;
    std::vector<constraint> less_constraints;

    variables vars;

    objective_function_type type = { objective_function_type::maximize };
};

enum class result_status
{
    success,
    internal_error,
    uninitialized,
    time_limit_reached,
    kappa_max_reached,
    limit_reached
};

struct solution
{
    solution() = default;

    solution(std::vector<bool> variables_, double value_)
      : variables(std::move(variables_))
      , value(value_)
    {}

    std::vector<bool> variables;
    double value;
};

struct result
{
    result() = default;
    result(const result& other) = default;
    result(result&& other) = default;
    result& operator=(const result& other) = default;
    result& operator=(result&& other) = default;

    result(result_status status_)
      : status(status_)
    {}

    std::string method;
    affected_variables affected_vars;

    std::vector<std::string> variable_name;
    std::vector<solution> solutions;

    double duration = 0.0;
    index loop = 0;
    index variables = 0;
    index constraints = 0;
    index remaining_constraints = std::numeric_limits<index>::max();

    // The variable id with the heaviest load factor i.e. the variable which
    // changes too many times during the @c update_row in-the-middle process.
    int annoying_variable = 0;

    result_status status{ result_status::uninitialized };

    operator bool() const
    {
        return status == result_status::success;
    }
};

/**
 * Read a @e lp file from the @e file.
 *
 * @exception baryonyx::file_format_error, baryonyx::file_access_error,
 *     std::system_error.
 *
 * @param ctx Baryonyx's internal state.
 * @param filename The file to read.
 */
BARYONYX_API
raw_problem
make_problem(const baryonyx::context_ptr& ctx, const std::string& filename);

/**
 * @brief Read a @c baryonyx::result from a file.
 * @details A @c baryonyx::result file store all meta data into comments and
 *     variable value.
 *
 * @param ctx Baryonyx's internal state.
 * @param filename The file to read.
 */
BARYONYX_API
result
make_result(const baryonyx::context_ptr& ctx, const std::string& filename);

/**
 * @details Try to solve or find a feasible solution for the @c
 *     baryonyx::problem.
 *
 * @param ctx Baryonyx's internal state.
 * @param pb Problem definition.
 *
 * @exception baryonyx::solver_error
 * @exception baryonyx::problem_definition
 */
BARYONYX_API
result
solve(const baryonyx::context_ptr& ctx, const raw_problem& pb);

/**
 * @details Try to optimize the @c baryonyx::problem with a set of
 *     parameters.
 *
 * @param ctx Baryonyx's internal state.
 * @param pb Problem definition.
 *
 * @return A representation of the result.
 *
 * @throw @c baryonyx::solver_error.
 */
BARYONYX_API
result
optimize(const baryonyx::context_ptr& ctx, const raw_problem& pb);

/**
 * @details Try to valid the @c baryonyx::result according to the
 *    @c baryonyx::raw_problem.
 *
 * @param pb Problem definition.
 * @param r A representation of the result of the problem @c pb.
 *
 * @return true if @c r is a solution of the problem @c pb, false otherwise.
 */
BARYONYX_API
bool
is_valid_solution(const raw_problem& pb, const result& r);

/**
 * @details Computes the value of the solution of the @c baryonyx::result
 *    according to the @c baryonyx::raw_problem.
 *
 * @param pb Problem definition.
 * @param r A representation of the result of the problem @c pb.
 *
 * @return the value of the solution if @c r is a solution of the problem
 *    @c pb.
 */
BARYONYX_API
double
compute_solution(const raw_problem& pb, const result& r);
}

#endif
